# Dockerfile

# Use node alpine as it's a small node image
ARG VERSION=16
FROM node:$VERSION-alpine AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat

WORKDIR /app

# Install dependencies based on the preferred package manager
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./
RUN ls
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i; \
  else echo "Lockfile not found." && yarn install; \
  fi

# 2. Rebuild the source code only when needed
FROM node:$VERSION-alpine AS builder
RUN mkdir -p /app
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
# COPY --from=deps /app/yarn.lock ./yarn.lock
COPY . .
# This will do the trick, use the corresponding env file for each environment.
# COPY .env.development.sample .env.production
RUN npm run build

# 3. Production image, copy all the files and run next
FROM node:$VERSION-alpine AS runner
WORKDIR /app

# ENV NODE_ENV=production

RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/package-lock.json /package-lock.json
COPY --from=deps /app/package.json ./package.json

COPY --from=builder /app/public ./public
COPY --from=builder /app/build ./build
COPY ./src ./src
COPY ./tsconfig.json ./tsconfig.json

# COPY --from=builder /app/package.json ./package.json
# COPY . .

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
# COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
# COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static


# USER nodejs

EXPOSE 3000

ENV PORT 3000

CMD ["npm", "start"]
